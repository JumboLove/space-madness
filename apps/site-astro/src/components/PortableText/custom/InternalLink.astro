---
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/content/Popover";
import { splitIntoLines } from "@/lib/stringUtils";
import { getUrlForSanityType } from "@/lib/url";
import type { Props as $, Mark } from "astro-portabletext/types";
import type { InternalLinkAnnotation } from "content-models";
export type Props = $<Mark<InternalLinkAnnotation>>;

const {
  node: { markDef },
} = Astro.props;

function buildLinks(mark: InternalLinkAnnotation) {
  const links: { url: string; text: string; internal: boolean }[] = [];

  // Resource content will not have its own internal page
  // It may have an external URL
  // Provide a link to the parent resource page and the external URL
  if (mark.internalLink._type === "resourceContent" && mark.internalLink.url) {
    links.push({
      url: mark.internalLink.url,
      text: mark.internalLink.title,
      internal: false,
    });
  }

  if (mark.internalLink._type === "resourceContent") {
    links.push({
      url: new URL(
        getUrlForSanityType(
          mark.internalLink.resource._type,
          mark.internalLink.resource.slug.current
        ),
        Astro.url
      ).toString(),
      text: mark.internalLink.resource.title,
      internal: true,
    });
  }

  if (mark.internalLink._type !== "resourceContent") {
    links.push({
      url: new URL(
        getUrlForSanityType(
          mark.internalLink._type,
          mark.internalLink.slug.current
        ),
        Astro.url
      ).toString(),
      text: mark.internalLink.title,
      internal: true,
    });
  }

  return links;
}

const [mainLink, resourceLink] = buildLinks(markDef);
const lines = splitIntoLines(markDef.internalLink.description);
---

{
  markDef.showPopover && (
    <Popover>
      <PopoverTrigger>
        <slot />
      </PopoverTrigger>

      <PopoverContent>
        <div class="flex flex-col justify-between gap-2 leading-snug">
          {lines.map((line, i) => (
            <p class="text-md" set:html={line} />
          ))}
          <a href={mainLink.url} class="pt-popover-content-link inline-block">
            {mainLink.text}
          </a>
          {resourceLink && (
            <div>
              Resource:{" "}
              <a
                class="pt-popover-content-link inline-block"
                href={resourceLink.url}
              >
                {resourceLink.text}
              </a>
            </div>
          )}
        </div>
      </PopoverContent>
    </Popover>
  )
}
{
  !markDef.showPopover && (
    <a href={mainLink.url} title={mainLink.text}>
      <slot />
    </a>
  )
}
