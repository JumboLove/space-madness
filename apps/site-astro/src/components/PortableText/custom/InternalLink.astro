---
import { generateUniqueId, splitIntoLines } from "@/lib/stringUtils";
import { getUrlForSanityType } from "@/lib/url";
import type { Props as $, Mark } from "astro-portabletext/types";
import type { InternalLinkAnnotation } from "content-models";
export type Props = $<Mark<InternalLinkAnnotation>>;

const {
  node: { markDef },
} = Astro.props;

// Resource content will not have its own page
// grab the resource content's parent resource data instead
function getInternalLinkUrl(mark: InternalLinkAnnotation) {
  const internalLinkObj =
    mark.internalLink._type === "resourceContent"
      ? mark.internalLink.resource
      : mark.internalLink;

  return getUrlForSanityType(
    internalLinkObj._type,
    internalLinkObj.slug.current
  );
}

const url = new URL(getInternalLinkUrl(markDef), Astro.url);
const uniqueId = `popover-${generateUniqueId()}`;
const lines = splitIntoLines(markDef.internalLink.description);
---

{
  markDef.showPopover && (
    <button
      class="underline"
      data-popover-id={uniqueId}
      aria-expanded="false"
      aria-haspopup="dialog"
      aria-describedby={uniqueId}
    >
      <span>
        <slot />
      </span>

      <div
        id={uniqueId}
        class="pt-popover not-prose bg-gray-50 border-2 border-gray-200 rounded-md drop-shadow-lg p-4"
        style="display: none;"
      >
        <div class="flex flex-col gap-2 justify-between leading-snug">
          <a
            href="/concepts/polyamory"
            class="pt-popover-content-link inline-block"
          >
            {markDef.internalLink.title}
          </a>

          {lines.map((line, i) => (
            <p class="text-md" set:html={line} />
          ))}
        </div>
        <div class="pt-popover-arrow" />
      </div>
    </button>
  )
}
{
  !markDef.showPopover && (
    <a href={url} title={markDef.internalLink.title}>
      <slot />
    </a>
  )
}
