---
import { cn } from "@/lib/utils";

interface Props {
  links: {
    url?: string;
    text: string;
  }[];
  class?: string;
}

const { links, class: className } = Astro.props;

// switch to a vertical layout on mobile if there is a lot of text
const layoutClasses = shouldBreadcrumbsBeVertical()
  ? "flex-col items-start sm:flex-row sm:items-center"
  : "";

function shouldBreadcrumbsBeVertical() {
  const reducer = (accumulator: string, currentLink: { text: string }) => {
    return `${accumulator} ${currentLink.text}`;
  };

  const allText = links.reduce(reducer, "");

  return allText.length > 50;
}
---

<nav class={cn("not-prose", className)} data-pagefind-ignore>
  <ol class={cn("flex items-center", layoutClasses)}>
    {
      links.map((link, i) => {
        const LinkComponent = link.url ? "a" : "span";
        const componentClasses = link.url ? "link" : "cursor-default";

        return (
          <li class="flex items-center overflow-hidden">
            <LinkComponent
              href={link.url}
              class={cn("truncate pb-1", componentClasses)}
            >
              {link.text}
            </LinkComponent>

            {i < links.length - 1 && (
              <svg
                class="w-3 h-3 mx-2 text-muted mb-1"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 6 10"
              >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="m1 9 4-4-4-4"
                />
              </svg>
            )}
          </li>
        );
      })
    }
  </ol>
</nav>
